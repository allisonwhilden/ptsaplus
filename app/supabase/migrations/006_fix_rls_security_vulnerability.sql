-- CRITICAL SECURITY FIX: RLS Policy Vulnerability
-- Fixes the auth.uid()::text comparison issue identified by privacy-guardian

-- First, drop the vulnerable policies
DROP POLICY IF EXISTS "Users can view own privacy settings" ON privacy_settings;
DROP POLICY IF EXISTS "Users can update own privacy settings" ON privacy_settings;
DROP POLICY IF EXISTS "Users can insert own privacy settings" ON privacy_settings;
DROP POLICY IF EXISTS "Users can view own consent records" ON consent_records;
DROP POLICY IF EXISTS "Users can insert own consent records" ON consent_records;
DROP POLICY IF EXISTS "Users can view own audit logs" ON audit_logs;
DROP POLICY IF EXISTS "Parents can manage child accounts" ON child_accounts;
DROP POLICY IF EXISTS "Users can manage own export requests" ON data_export_requests;
DROP POLICY IF EXISTS "Users can update own member record" ON members;
DROP POLICY IF EXISTS "Admins can manage all members" ON members;

-- Create a secure function to get the current user's Clerk ID
CREATE OR REPLACE FUNCTION get_current_user_id()
RETURNS TEXT AS $$
BEGIN
  -- This should be properly integrated with your auth system
  -- For Clerk integration, this would need to extract the user ID from JWT claims
  -- This is a placeholder that needs proper implementation
  RETURN current_setting('request.jwt.claims', true)::json->>'sub';
EXCEPTION
  WHEN OTHERS THEN
    RETURN NULL;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create a function to check if user is admin or board member
CREATE OR REPLACE FUNCTION is_admin_or_board()
RETURNS BOOLEAN AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1 FROM members 
    WHERE clerk_id = get_current_user_id()
    AND role IN ('admin', 'board')
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Recreate RLS policies with proper security

-- Privacy Settings Policies
CREATE POLICY "Users can view own privacy settings" ON privacy_settings
  FOR SELECT
  USING (user_id = get_current_user_id());

CREATE POLICY "Users can update own privacy settings" ON privacy_settings
  FOR UPDATE
  USING (user_id = get_current_user_id())
  WITH CHECK (user_id = get_current_user_id());

CREATE POLICY "Users can insert own privacy settings" ON privacy_settings
  FOR INSERT
  WITH CHECK (user_id = get_current_user_id());

-- Consent Records Policies
CREATE POLICY "Users can view own consent records" ON consent_records
  FOR SELECT
  USING (
    user_id = get_current_user_id() 
    OR parent_user_id = get_current_user_id()
  );

CREATE POLICY "Users can insert own consent records" ON consent_records
  FOR INSERT
  WITH CHECK (
    user_id = get_current_user_id() 
    OR parent_user_id = get_current_user_id()
  );

-- No UPDATE or DELETE on consent records (immutable audit trail)

-- Audit Logs Policies
CREATE POLICY "Users can view own audit logs" ON audit_logs
  FOR SELECT
  USING (user_id = get_current_user_id());

CREATE POLICY "Admins can view all audit logs" ON audit_logs
  FOR SELECT
  USING (is_admin_or_board());

-- Audit logs are insert-only via functions, no direct user access for INSERT

-- Child Accounts Policies
CREATE POLICY "Parents can view own child accounts" ON child_accounts
  FOR SELECT
  USING (parent_user_id = get_current_user_id());

CREATE POLICY "Parents can manage own child accounts" ON child_accounts
  FOR UPDATE
  USING (parent_user_id = get_current_user_id())
  WITH CHECK (parent_user_id = get_current_user_id());

CREATE POLICY "Admins can view all child accounts" ON child_accounts
  FOR SELECT
  USING (is_admin_or_board());

-- Data Export Requests Policies
CREATE POLICY "Users can view own export requests" ON data_export_requests
  FOR SELECT
  USING (user_id = get_current_user_id());

CREATE POLICY "Users can create own export requests" ON data_export_requests
  FOR INSERT
  WITH CHECK (user_id = get_current_user_id());

CREATE POLICY "Admins can view all export requests" ON data_export_requests
  FOR SELECT
  USING (is_admin_or_board());

-- Members Table Policies (update existing)
CREATE POLICY "Users can update own member record" ON members
  FOR UPDATE
  USING (clerk_id = get_current_user_id())
  WITH CHECK (clerk_id = get_current_user_id());

CREATE POLICY "Admins can manage all members" ON members
  FOR ALL
  USING (is_admin_or_board());

-- Add indexes for performance on the security functions
CREATE INDEX IF NOT EXISTS idx_members_clerk_id_role ON members(clerk_id, role);

-- Add additional security constraints
ALTER TABLE privacy_settings ADD CONSTRAINT privacy_settings_user_id_check 
  CHECK (user_id IS NOT NULL AND length(user_id) > 0);

ALTER TABLE consent_records ADD CONSTRAINT consent_records_user_id_check 
  CHECK (user_id IS NOT NULL AND length(user_id) > 0);

ALTER TABLE child_accounts ADD CONSTRAINT child_accounts_parent_check
  CHECK (parent_user_id != child_user_id);

-- Create secure views for sensitive data access
CREATE OR REPLACE VIEW member_directory AS
SELECT 
  m.id,
  m.first_name,
  m.last_name,
  CASE WHEN ps.show_email = true OR is_admin_or_board() THEN m.email ELSE NULL END as email,
  CASE WHEN ps.show_phone = true OR is_admin_or_board() THEN m.phone ELSE NULL END as phone,
  m.role,
  m.membership_type,
  m.membership_status
FROM members m
LEFT JOIN privacy_settings ps ON ps.user_id = m.clerk_id
WHERE ps.directory_visible = true OR is_admin_or_board();

-- Grant appropriate permissions
GRANT SELECT ON member_directory TO authenticated;

-- Add comment for documentation
COMMENT ON VIEW member_directory IS 'Privacy-aware view of member information respecting user privacy settings';